name: Build and Deploy to ECR

on:
  pull_request:
    branches: [ main, master ]
    types: [ closed ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: mailenv-smtp-mqdrop
  ECR_URL: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-2.amazonaws.com

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip

    - name: Get version from VERSION file
      id: get-version
      run: |
        echo "APPVER=$(cat VERSION)" >> $GITHUB_ENV
        echo "version=$(cat VERSION)" >> $GITHUB_OUTPUT

    - name: Extract ClickUp task ID from branch name
      id: extract-task-id
      run: |
        # Extract task ID from the branch name that was merged
        BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
        
        if [[ $BRANCH_NAME =~ task-?([a-zA-Z0-9]+) ]]; then
          TASK_ID="${BASH_REMATCH[1]}"
          echo "task_id=$TASK_ID" >> $GITHUB_OUTPUT
          echo "Found ClickUp task ID in branch name: $TASK_ID"
        else
          echo "task_id=" >> $GITHUB_OUTPUT
          echo "No ClickUp task ID found in branch name: '$BRANCH_NAME'"
        fi

    - name: Add building comment to ClickUp task
      if: steps.extract-task-id.outputs.task_id != ''
      run: |
        TASK_ID="${{ steps.extract-task-id.outputs.task_id }}"
        CLICKUP_TOKEN="${{ secrets.CLICKUP_API_TOKEN }}"
        
        # Debug: Check token format (first 10 chars)
        echo "Token starts with: ${CLICKUP_TOKEN:0:10}..."
        echo "Task ID: $TASK_ID"
        
        # Test API access first
        echo "Testing ClickUp API access..."
        curl -s -X GET \
          -H "Authorization: $CLICKUP_TOKEN" \
          "https://api.clickup.com/api/v2/task/$TASK_ID" | jq '.name // "Task not found"'
        
        # Add a comment to the ClickUp task indicating build has started
        curl -X POST \
          -H "Authorization: $CLICKUP_TOKEN" \
          -H "Content-Type: application/json" \
          -d "{
            \"comment_text\": \"ðŸ”¨ **Building version ${{ env.APPVER }}**\\n\\nBuild process started for version \`${{ env.APPVER }}\`. This will create a Docker image and push it to Amazon ECR.\"
          }" \
          "https://api.clickup.com/api/v2/task/$TASK_ID/comment"
        
        echo "Added building comment to ClickUp task $TASK_ID"

    - name: Update ClickUp task status to BUILDING
      if: steps.extract-task-id.outputs.task_id != ''
      run: |
        TASK_ID="${{ steps.extract-task-id.outputs.task_id }}"
        CLICKUP_TOKEN="${{ secrets.CLICKUP_API_TOKEN }}"
        
        # Update task status to "BUILDING"
        curl -X PUT \
          -H "Authorization: $CLICKUP_TOKEN" \
          -H "Content-Type: application/json" \
          -d '{
            "status": "BUILDING"
          }' \
          "https://api.clickup.com/api/v2/task/$TASK_ID"
        
        echo "Updated ClickUp task $TASK_ID status to 'BUILDING'"

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ steps.get-version.outputs.version }}
      run: |
        # Build the Docker image
        docker build \
          --build-arg APPVER=${{ env.APPVER }} \
          --build-arg IMAGE_NAME=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.APPVER }} \
          -t ${{ env.ECR_REPOSITORY }}:${{ env.APPVER }} .
        
        # Tag the image for ECR
        docker tag ${{ env.ECR_REPOSITORY }}:${{ env.APPVER }} ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.APPVER }}
        
        # Push the image to ECR
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.APPVER }}
        
        # Also tag as latest
        docker tag ${{ env.ECR_REPOSITORY }}:${{ env.APPVER }} ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest

    - name: Update ClickUp task status to TO-DEPLOY and add comment
      if: steps.extract-task-id.outputs.task_id != ''
      run: |
        TASK_ID="${{ steps.extract-task-id.outputs.task_id }}"
        CLICKUP_TOKEN="${{ secrets.CLICKUP_API_TOKEN }}"
        ECR_REGISTRY="${{ steps.login-ecr.outputs.registry }}"
        
        # Update task status to "TO-DEPLOY"
        curl -X PUT \
          -H "Authorization: $CLICKUP_TOKEN" \
          -H "Content-Type: application/json" \
          -d '{
            "status": "TO-DEPLOY"
          }' \
          "https://api.clickup.com/api/v2/task/$TASK_ID"
        
        # Add a comment to the ClickUp task with deployment details
        curl -X POST \
          -H "Authorization: $CLICKUP_TOKEN" \
          -H "Content-Type: application/json" \
          -d "{
            \"comment_text\": \"âœ… **Version ${{ env.APPVER }} deployed to ECR**\\n\\n**ECR Image:** \`$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.APPVER }}\`\\n**Latest Tag:** \`$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest\`\"
          }" \
          "https://api.clickup.com/api/v2/task/$TASK_ID/comment"
        
        echo "Updated ClickUp task $TASK_ID status to 'TO-DEPLOY' and added deployment comment"

    - name: Output image URI
      run: |
        echo "Image pushed to ECR:"
        echo "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.APPVER }}"
        echo "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest"
        
        if [ "${{ steps.extract-task-id.outputs.task_id }}" != "" ]; then
          echo "ClickUp task ${{ steps.extract-task-id.outputs.task_id }} updated with deployment status"
        fi 